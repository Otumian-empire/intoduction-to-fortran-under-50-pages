1 - Basics

! - starts a comment

Every code must have a program name and end program name, as in 

program helloworld
! code here

end helloworld

implicit none - checks if all variables are declared

variable declaration
type :: var

as in , real :: x, y and integer :: age, numberOfDays

print *, objects
read *, objects

we can do,
program simplecode
! this program demonstrate what we have seen so far

integer :: a, b, c

print *, "Enter a:"
read *, a

print *, "Enter a:"
read *, a

c = a+b

print *, c

end program simplecode

It is considered that every file must have one program

character data type.
this is most similar to c
in c, char name[10];
in fortran, character :: name*10


2 - Making Decisions

var = val, is a simple assigment statement

operators: +, -, *, /, **, (), mod

intrinsic functions are builtin functions such as sin, cos, exp, tan,
 atan, log, modetc

==, checks for equality, like C

if statement follows the patterns
if (condition) then code end if

program sampleIf
integer :: age
read *, age
if (age == 10) then
    print*, 'you are ten'
end if
end program sampleIf

A good program:
- Uses comments appropriately to explain what is happening.
- Uses indentation to make the program easier to read.
- Uses meaningful variable names.
- Uses sensible prompts to let the user know what is going on.
- Uses implicit none at the start of every program.
- Is efficient!

if then, else if then and else and end if

program sampleIfElse
implicit none
integer :: num
print*, 'enter num'
read *, num

if (num == 10) then
    num = num - 2
else if (num == 9) then
    num = num - 3
else
    num = 0
end if
print *, num

end program sampleIf

relation operators: ==, /=, <, >, <=, >=
logical operators: .and., .or.

stop - literally stops the program

if (condition) stop

there is a difference in a real zero and an integer zero,
as such you should find the absolute value of the real of interest,
check if its less than some arbituary number, say, 0.000001


3 - Loops

integer division does not result in a real result

do-loop allows reexecution of codes, just like a for-loop in c

do-loop is of the form
do var = begin, end, step
    code
end do

The do loop is start and end inclusive unlike c where by, 0 to 20 is 0 to 19

Nested loops
do var_i=a,b,c
    do var_j=d,e,f
        ! code
    end do
end do


